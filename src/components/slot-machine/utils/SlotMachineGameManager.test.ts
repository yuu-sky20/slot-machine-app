import GameManager from "./SlotMachineGameManager";

describe("正常にゲームクリアされるか", () => {
    it("ゲームクリアされる1", () => {
        const gameManager = new GameManager()
        gameManager.judgeSlotHorizontalLine(6)
        gameManager.judgeSlotHorizontalLine(6)
        gameManager.judgeSlotHorizontalLine(6)
        expect(gameManager.isGameCleared()).toBeTruthy()
    })
    it("ゲームクリアされる2", () => {
        const gameManager = new GameManager()
        gameManager.judgeSlotHorizontalLine(0)
        gameManager.judgeSlotHorizontalLine(0)
        gameManager.judgeSlotHorizontalLine(0)
        expect(gameManager.isGameCleared()).toBeTruthy()
    })
    it("ゲームクリアされる3", () => {
        const gameManager = new GameManager()
        gameManager.judgeSlotHorizontalLine(14)
        gameManager.judgeSlotHorizontalLine(14)
        gameManager.judgeSlotHorizontalLine(14)
        gameManager.judgeSlotHorizontalLine(14)
        gameManager.judgeSlotHorizontalLine(14)
        expect(gameManager.isGameCleared()).toBeTruthy()
    })

    it("ゲームクリアされない1", () => {
        const gameManager = new GameManager()
        gameManager.judgeSlotHorizontalLine(2)
        gameManager.judgeSlotHorizontalLine(3)
        gameManager.judgeSlotHorizontalLine(2)
        expect(gameManager.isGameCleared()).toBeFalsy()
    })
    it("ゲームクリアされない2", () => {
        const gameManager = new GameManager()
        gameManager.judgeSlotHorizontalLine(5)
        gameManager.judgeSlotHorizontalLine(6)
        gameManager.judgeSlotHorizontalLine(0)
        expect(gameManager.isGameCleared()).toBeFalsy()
    })
    it("ゲームクリアされない3", () => {
        const gameManager = new GameManager()
        gameManager.judgeSlotHorizontalLine(9)
        gameManager.judgeSlotHorizontalLine(9)
        gameManager.judgeSlotHorizontalLine(9)
        gameManager.judgeSlotHorizontalLine(10)
        expect(gameManager.isGameCleared()).toBeFalsy()
    })
})
describe("正常にゲームリセットされるかどうか", () => {
    it("ゲームリセットされる1", () => {
        const gameManager = new GameManager()
        gameManager.judgeSlotHorizontalLine(2)
        gameManager.judgeSlotHorizontalLine(3)
        gameManager.judgeSlotHorizontalLine(2)
        gameManager.resetGame()
        expect(gameManager.isGameCleared()).toBeTruthy()
    })
    it("ゲームリセットされる2", () => {
        const gameManager = new GameManager()
        gameManager.judgeSlotHorizontalLine(6)
        gameManager.judgeSlotHorizontalLine(6)
        gameManager.judgeSlotHorizontalLine(6)
        gameManager.resetGame()
        expect(gameManager.isGameCleared()).toBeTruthy()
        gameManager.judgeSlotHorizontalLine(10)
        gameManager.judgeSlotHorizontalLine(10)
        gameManager.judgeSlotHorizontalLine(6)
        expect(gameManager.isGameCleared()).toBeFalsy()
    })
})
describe("リーチ状態を正常に検出するかどうか", () => {
    it("検出する1", () => {
        const gameManager = new GameManager()
        expect(gameManager.judgeSlotHorizontalLine(30)).toBeFalsy()
        expect(gameManager.judgeSlotHorizontalLine(30)).toBeTruthy()
        expect(gameManager.judgeSlotHorizontalLine(30)).toBeFalsy()
    })
    it("検出する2", () => {
        const gameManager = new GameManager()
        expect(gameManager.judgeSlotHorizontalLine(63)).toBeFalsy()
        expect(gameManager.judgeSlotHorizontalLine(63)).toBeTruthy()
        expect(gameManager.judgeSlotHorizontalLine(63)).toBeFalsy()
        gameManager.resetGame()
        expect(gameManager.judgeSlotHorizontalLine(91)).toBeFalsy()
        expect(gameManager.judgeSlotHorizontalLine(91)).toBeTruthy()
        expect(gameManager.judgeSlotHorizontalLine(91)).toBeFalsy()
    })
    it("検出しない1", () => {
        const gameManager = new GameManager()
        expect(gameManager.judgeSlotHorizontalLine(21)).toBeFalsy()
        expect(gameManager.judgeSlotHorizontalLine(53)).toBeFalsy()
        expect(gameManager.judgeSlotHorizontalLine(21)).toBeFalsy()
    })
    it("検出しない2", () => {
        const gameManager = new GameManager()
        expect(gameManager.judgeSlotHorizontalLine(76)).toBeFalsy()
        expect(gameManager.judgeSlotHorizontalLine(51)).toBeFalsy()
        expect(gameManager.judgeSlotHorizontalLine(0)).toBeFalsy()
        gameManager.resetGame()
        expect(gameManager.judgeSlotHorizontalLine(2)).toBeFalsy()
        expect(gameManager.judgeSlotHorizontalLine(3)).toBeFalsy()
        expect(gameManager.judgeSlotHorizontalLine(5)).toBeFalsy()
    })
})
describe("judgeSlotHorizontalLine()引数の境界値テスト", () => {
    it("小数を含まない", () => {
        const gameManager = new GameManager()
        expect(() => gameManager.judgeSlotHorizontalLine(3.9)).toThrow("引数には必ず自然数を入力してください")
        expect(() => gameManager.judgeSlotHorizontalLine(12.7834)).toThrow("引数には必ず自然数を入力してください")
    })
    it("負数を含まない", () => {
        const gameManager = new GameManager()
        expect(() => gameManager.judgeSlotHorizontalLine(-1)).toThrow("引数には必ず自然数を入力してください")
        expect(() => gameManager.judgeSlotHorizontalLine(-125)).toThrow("引数には必ず自然数を入力してください")
    })
    it("小数の負数を含まない", () => {
        const gameManager = new GameManager()
        expect(() => gameManager.judgeSlotHorizontalLine(-9.7)).toThrow("引数には必ず自然数を入力してください")
        expect(() => gameManager.judgeSlotHorizontalLine(-13942.719526)).toThrow("引数には必ず自然数を入力してください")
    })
})